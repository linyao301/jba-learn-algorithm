package com.jba.learn.algorithm.bigData;

/**
 * 一致性哈希算法的基本原理
 *
 * <pre>
 *   【题目】
 *   工程师常使用服务器集群来设计和实现数据缓存，以下是常见的策略。
 *   1.无论是添加、查询还是删除数据，都先将数据的 id 通过哈希函数
 *   转换成一个哈希值，记为key。
 *   2.如果目前机器有N台，则计算key%N的值，这个值就是该数据所属的机器编号，
 *   无论是添加、删除还是查询操作，都只在这台机器上进行。
 *   请分析这种缓存策略可能带来的问题，并提出改进的方案。
 * </pre>
 */
public class ConsistHash {

  public void answer() {
    /**
     * 题目中描述的缓存策略的潜在问题是如果增加或删除机器（N变化），
     * 代价会很高，所有的数据都不得不根据id重新计算一遍哈希值，
     * 并将哈希值对新的机器数进行取模操作，然后进行大规模的数据迁移
     *
     *一致性哈希算法+虚拟节点技术(通过分配较多的虚拟节点去抢占哈希环，数量
     * 多了起来之后，哈希函数的离散型就可以得到很好的体现)
     */
  }

}
